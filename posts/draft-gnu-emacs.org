#+TITLE: Why I use GNU Emacs
#+DATE: 2020-11-21

I spend most of my productive time in GNU Emacs. I had used Visual
Studio, Eclipse and Vim before I fully converted and never looked
back. In this post I am going to explain why it was a pragmatic
choice, and why you also need to give this old editor a try.

* Learning Emacs shortcuts is a great investment

Emacs shortcuts are ubiquitous in Linux. Most interactive programs
such as =bash=, =busybox sh= and =grub2= support a few essential Emacs
key bindings. Learning them improved my command line-fu tremendously,
now that I need to keep only one set of shortcuts in the muscle
memory.

Just to be clear, I think Vim is the king of plain text editing. I
still miss being able to type something like =s2ge= in command mode to
delete everything up to second letter =e= after the cursor, for
example. Some advanced shells, such as =zsh=, support vi mode. But I
have yet to see a single production server using zsh as the default
shell, let alone in vi mode. So, if you intend to work with hosts
other than the localhost, most likely you won't have this luxury.

By the way, this is why I would not recommend remapping the default
key combinations in Emacs and stick to the defaults as much as
possible.

* Emacs lets you explore new and obscure programming languages

Most arguments presented in this section are applicable to any
powerful text editor, and they are targeted towards IDE
users. Thankfully, everything that I had to say about this topic has
been already written in [[https://blog.osteele.com/2004/11/ides][The IDE divide]] article, so I will just briefly
recite it:

#+BEGIN_QUOTE
The developer world is divided into two camps. Language mavens wax
rhapsodic about the power of higher-level programming — first-class
functions, staged programming, AOP, MOPs, and reflection. Tool mavens
are skilled at the use of integrated build and debug tools, integrated
documentation, code completion, refactoring, and code
comprehension. Language mavens tend to use a text editor such as emacs
or vim — these editors are more likely to work for new languages. Tool
mavens tend to use IDEs such as Visual Studio, Eclipse, or IntelliJ,
that integrate a variety of development tools
#+END_QUOTE



 1) The language should have a good IDE
 2) It should have curly braces, because this is what makes language
    serious

Thankfully,

* elisp is a nicely balanced scripting language

Fun fact: I switched to Emacs after learning vim well enough to start
writing my own extensions.

Designing a Turing-complete programming language is extremely easy,
but making a consistent, ergonomic language with orthogonal sets of
features is extremely hard. That's why accidentally esoteric
programming languages like vimscript and LAMMPS script exist, and they
are pain to use. On the other hand, using a heavy-weight and verbose
programming language such as Java

* Org-mode
