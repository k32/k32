# -*- truncate-lines: nil -*-
#+TITLE: Introduction to Snabbkaffe
#+DATE: 2020-12-01
#+startup: beamer
#+LaTeX_CLASS: beamer
#+OPTIONS: H:2 todo:t ^:nil d:nil todo:nil
#+latex_header: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Topic}\tableofcontents[currentsection]\end{frame}}
#+latex_header: \usetheme{Boadilla}
#+latex_header: \linespread{1}
#+latex_header: \usepackage{tikz}
* DONE Background and motivation

** What is snabbkaffe

- Snabbkaffe is a library that allows to test concurrent and distributed systems

- It does so by moving focus from /states/ to /effects/

- Developers find bugs by looking at the logs, snabbkaffe does the same and automates the process

- Advanced modes of testing: fault and scheduling injection

- Efficiency: run test scenario once, verify multiple properties

** Name

- =Snabbkaffe= means ``instant coffee'' in Swedish

- There is no hidden meaning, the name was chosen randomly

** Nondeterminism

*** Definitions
- *Deterministic* functions always produce the same output for the same input

- *Nondeterministic* functions can produce different outputs for the same input

*** Sources of nondeterminism

- Process schedulings

- Fault-tolerance (failovers)

- Network (packet loss and reordering)

- Load balancing, worker pools

Nondeterminism is an inherent property of concurrent systems

** Why change the paradigm of testing?

*** Difficulty levels

1) Easy: Pure functions

2) Normal: Stateful systems

3) Hard: Nondeterministic systems

4) *Nightmare:* Nondeterministic fault-tolerant distributed systems

*** Traditional approach

- Traditional approach is sufficient for testing pure functions.
  There are a variety of excellent tools for this, like PropER

- It can do pretty well with stateful systems (stateful PropER)

- *Where it starts to crack:* typical Erlang application assembled together

** Challenges of testing Erlang applications /in situ/

Erlang partitions the state of the system between processes

+ It eliminates some concurrency bugs and isolates failures

+ But it makes the system harder to analyze

+ More often than not it's impossible to inspect state of the process (=sys:get_state=)

+ Often it's useless

+ Tests that rely on the state usually need to wait for the system to stabilize, it can be slow, and they can't analyze the system in motion

+ Asynchronous data processing patterns (e.g. job queues) are incredibly annoying to test using traditional methods

** Possible solution to this problem?

Move away from states and embrace events and their temporal relationships

* DONE Instrumenting the code

** Tracing macros

1) Replace your regular logs with structured logs (the industry is moving towards structured logs anyway)

2) Include ="snabbkaffe/include/trace.hrl"= header to your module

3) Use =?tp= or =?tp_span= macros for logging (=tp= stands for Trace Point)

   - In the release build these macros will become regular =logger= messages

   - In the test build these macros will emit trace events

** Examples

#+begin_src erlang
%% Disappears in the release build:
?tp(rlog_replica_import_trans,
    #{ seqno       => SeqNo
     , txid        => TXID
     , transaction => Transaction
     })
#+end_src

#+begin_src erlang
%% Becomes a notice message
?tp(notice, "Remote process died",
    #{ reason   => Reason
     , my_state => State
     })
#+end_src

#+begin_src erlang
%% Emits two events:
?tp_span(trans_write, #{record => Record, txid => get_txid()},
         mnesia:write(Record)).
#+end_src

** Distributed tracing

Forward traces from the remote node:
#+begin_src erlang
%% on the ct_master:
snabbkaffe:forward_trace(Node)
#+end_src

All features (incl. fault and scheduling injections) will work

** Why not using erlang tracing?

An often asked question: why not using =dbg:tracer= or the like?

It was a conscious design choice:

- Traces obtained this way are tightly bound to the structure of the code. Refactoring the code or adding a new function argument would break the tests

- Debug traces are excessive, it would be hard to see the forest through the trees

- Log messages are typically placed in ``interesting'' places
  - Interesting for humans = interesting for tests

* DONE Testing
** Stages of the test

Every testcase is split in two stages:

*** Run stage

where the program runs and emits the event trace

*** Check stage

where the trace is collected as a list of Erlang maps and validated against the spec(s)

** check_trace macro

#+BEGIN_SRC erlang
my_test() ->
  ?check_trace(begin
                 %% Run stage:
                 launch_system(),
                 do_stuff(),
                 wait_for_completion(),
                 get_result()
               end,
               fun(Result, Trace) ->
                  %% Check stage:
                  ?assertMatch(ok, Result),
                  check_history(Trace),
                  check_history2(Trace),
                  ...
               end).
#+END_SRC

** Waiting for events

It is possible to block run stage until a certain event occurs:

#+begin_src erlang
?block_until(#{ ?snk_kind  := message_acked
              , message_id := Id
              } when Id > 42,
             Timeout, BackInTime)
#+end_src

This macro will return immediately as soon as the event happens, so it's more efficient and less prone to flakiness than a sleep.

** Starting an asynchronous action

=?block_until= is fine, but it requires timeout tuning.
What if the same event happened in the past?

#+begin_src erlang
?wait_async_action( send_async_request(Req)
                  , #{ ?snk_kind := request_handled
                     , request := Req
                     }
                 [, Timeout]
                  )
#+end_src

This macro doesn't have to look into the past.

** Integrating with PropER

It's not a problem to combine stateless PropER tests with snabbkaffe.
=?check_trace= macro can be used inside proper's =?FORALL= macro.

Snabbkaffe provides some convenience macros that simplify trace-property-based testing:

#+begin_src erlang
trace_prop_test(Config) ->
  Prop = ?forall_trace(
            X, list(),
            begin
              %% Run stage:
              do_stuff(X)
            end,
            fun(Result, Trace) ->
                %% Check stage
                true
            end),
  ?run_prop(Config, Prop).
#+end_src

** Misc. macros

There are a few macros that are not directly related to trace-based testing, but often needed:

*** ?panic

#+begin_src erlang
?panic("Unexpected result", #{result => A})
#+end_src

Throw an error

*** ?retry
#+begin_src erlang
?retry(_RetryPeriod = 100, _MaxRetries = 10,
       some_action_that_can_fail())
#+end_src

Run some code periodically until it succeeds (use as the last resort, when =?block_until= won't work)

*** ?give_or_take

#+begin_src erlang
?give_or_take(_Expected = 20, _Deviation = 2, Value)
#+end_src

Check that an integer value is within range

* DONE Basic functions for working with traces

** Structure of the trace event

#+begin_src erlang
[#{ ?snk_kind => foo
  , ?snk_meta => #{ domain => [foo, bar]
                  , node => 'foo@localhost'
                  , time => <monotonic time>
                  , pid => <0.343.0>
                  , group_leader => <0.67.0>
                  , custom_field1 => baz
                  , custom_field2 => foobar
                  }
  , field1 => 42
  , field2 => foo
  },
  ...
]
#+end_src

** Structure of the span trace

#+begin_src erlang
[#{ ?snk_kind => foo
  , ?snk_meta => #{ ... }
  , ?snk_span => start
  , field1 => 42
  , field2 => foo
  },
 #{ ?snk_kind => foo
  , ?snk_meta => #{ ... }
  , ?snk_span => {complete, ReturnValue}
  , field1 => 42
  , field2 => foo
  }
]
#+end_src


** Filtering the trace

*** ?of_kind macro
#+begin_src erlang
FooEvents = ?of_kind(foo, Trace)
#+end_src

#+begin_src erlang
FooOrBarEvents = ?of_kind([foo, bar], Trace)
#+end_src

*** ?of_domain macro

#+begin_src erlang
EMQXEvents = ?of_domain([emqx|_], Trace)
#+end_src

*** ?of_node macro
#+begin_src erlang
NodeFooEvents = ?of_node('foo@localhost', Trace)
#+end_src

*** More complex filtering

Of course, =lists:filter= and list comprehensions work too

** Extracting fields

#+begin_src erlang
[1, 2] = ?projection(id, ?of_kind(handle_message, Trace))
#+end_src
#+begin_src erlang
[{1, "hello"}, {2, "world"}] =
     ?projection( [id, message]
                , ?of_kind(handle_message, Trace)
                )
#+end_src

* TODO Event correlations

** ?strict_causality macro

#+begin_src erlang
?strict_causality( #{?snk_kind := msg_received, id := _Id}
                 , #{?snk_kind := msg_processed, id := _Id}
                 , Trace
                 )
#+end_src

Return value:

- =true= if some matching events were found
- =false= if no events were found
- exception if causality is violated

** ?strict_causality with guard

Suppose we're testing a "base64 server":

#+begin_src erlang
?strict_causality( #{req := _Req}
                 , #{resp := _Resp}
                 , _Resp =:= base64:encode(_Req)
                 , Trace
                 )
#+end_src

** ?causality macro

Overall, it's the same as =?strict_causality=, except it doesn't require each ``cause'' to have an ``effect''

#+begin_src erlang
?causality( #{?snk_kind := msg_received, id := _Id}
          , #{?snk_kind := msg_processed, id := _Id}
         [, Guard]
          , Trace
          )
#+end_src

** Pitfalls

There is a potential problem with ``causality'' macros:

1) Format of the event is changed in the code
2) Match expressions in causality stop matching the events
3) Tests still pass, even though they didn't find any events

*Solution:*

Always wrap =?causality= and =?strict_causality= in =?assert=, unless there are legit situations when no events can be produced in the test

** ?find_pairs macro

#+begin_src erlang
?find_pairs(Strict, MatchCause, MatchEffect [, Guard] , Trace)
#+end_src

1) It returns a list of ={pair, Cause, Effect}= or ={singleton, Cause}=

2) When =Strict= is =true= this macro also checks that effects don't occur before causes (much like =?causality=)

** Splitting traces

Often it is useful to split traces to parts before and after some event (for example, restart)

There are a variety of macros for this:

*** split_at
#+begin_src erlang
?split_trace_at(bar, [foo, bar, baz, bar]).
{[foo], [bar, baz, bar]}.
#+end_src

*** splitr
#+begin_src erlang
?splitr_trace(foo, [1, 2, foo, 1, 2, foo])
[[1, 2], [foo, 1, 2], [foo]].
#+end_src

*** splitl

#+begin_src erlang
?splitl_trace(foo, [1, 2, foo, 1, 2, foo]).
[[1, 2, foo], [1, 2, foo]].
#+end_src

* DONE Nemesis

** Are your supervisors tested?

- Taking fault-tolerance seriously is one of the selling points of Erlang.
  Organizing processes in supervisor trees is used widely, but not often tested

- Tuning supervisor trees is an art

- Snabbkaffe wants to turn it into a chore

- It does so by injecting deliberate faults into the system

** Fault injection

Any tracepoint can be used to inject errors into the system

#+begin_src erlang
?inject_crash( #{?snk_meta := #{domain := [ekka, rlog|_]}}
             , snabbkaffe_nemesis:random_crash(0.1)
             )

#+end_src

- First argument: event matching expression
- Second argument: fault scenario

** Fault scenarios

*** Always crash:
#+begin_src erlang
?inject_crash(..., snabbkaffe_nemesis:always_crash())
#+end_src

*** Crash =N= times:

#+begin_src erlang
?inject_crash(..., snabbkaffe_nemesis:recover_after(10))
#+end_src

*** Crash randomly with probability =P=:

#+begin_src erlang
?inject_crash(..., snabbkaffe_nemesis:random_crash(0.1))
#+end_src

*** Crash periodically:

#+begin_src erlang
snabbkaffe_nemesis:periodic_crash(
  _Period = 10, _DutyCycle = 0.5, _Phase = math:pi())
#+end_src

** DONE Manipulating process schedulings

- Sometimes it is necessary to test a certain process scheduling

- Imagine working on a bugfix using TDD-style

- For example, normally effect =foo= occurs after effect =bar=, and everything works.
  But in rare cases the opposite happens, and the bug occurs

- Snabbkaffe can manipulate process schedulings to some extend:

#+BEGIN_SRC erlang
%% run stage...
?force_ordering(#{?snk_kind := bar}, #{?snk_kind := foo})
#+END_SRC

(It also supports guards)

* Using snabbkaffe as a benchmark library

** Disclaimer

- This usecase is a secondary, and quite rudimentary. Don't expect much
- It lacks many features of proper benchmarking libraries, such as
  + Warmup
  + Advanced statistical analysis, e.g. outlier detection

** Reporting metrics

#+begin_src erlang
%% Report a single scalar datapoint:
snabbkaffe:push_stat(scalar_metric_name, Value),
%% Report a single datapoint with X coord:
snabbkaffe:push_stat(metric_name, X, Value),
%% Report multiple scalar datapoints:
snabbkaffe:push_stats(metric_name, [Val1, Val2, ...]),
%% Report multiple datapoints with X coord:
snabbkaffe:push_stats(metric_name, X, [Val1, Val2, ...])
#+end_src

** Using spans to analyze performance

=push_stats= function also works together with =?find_pairs= macro:
#+begin_src erlang
Pairs = ?find_pairs( #{ ?snk_span := start
                      , ?snk_kind := foo
                      , pid       := _Pid
                      }
                   , #{ ?snk_span := {complete, _}
                      , ?snk_kind := foo
                      , pid       := _Pid
                      }
                   ),
snabbkaffe:push_stats(metric_name, [X,] Pairs)
#+end_src

** Analyzing the results

Use the following function in the end of check stage:
#+begin_src erlang
snabbkaffe:analyze_statistics()
#+end_src

It will print the results in the console:

#+begin_example
Mean scalar_metric_name: 10.0

Statisitics of metric_name
100.479087 ^                                       *
           |                         *
           |                   *
           |
           |            *
           |      *
         0 +---------------------------------------->
           0                                     1100
#+end_example

* DONE Conclusion

** Useful links

https://github.com/kafka4beam/snabbkaffe

The library is being actively developed.

Suggestions, bug reports and patches are welcome!

*** Snabbkaffe in action

Feel free to use as an example (clickable links):

- [[https://github.com/kafka4beam/brod/blob/master/test/brod_group_subscriber_SUITE.erl][brod]]

- [[https://github.com/kafka4beam/kflow/tree/master/test][kflow]]

- [[https://github.com/k32/ekka/blob/master/test/ekka_mnesia_SUITE.erl][ekka]]

- [[https://github.com/emqx/emqx/][EMQ X]]
